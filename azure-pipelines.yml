trigger:
- main

pool:
  vmImage: 'ubuntu-latest'
  
variables:
  - group: 'DatabaseSettings'

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: DotNetCoreCLI@2
  displayName: 'DotNet Restore'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'DotNet Build'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration Release'

- task: DotNetCoreCLI@2
  displayName: 'DotNet Publish'
  inputs:
    command: 'publish'
    publishWebProjects: true
    arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)/api'

- script: |
    dotnet tool install dotnet-ef --version 8.0.0 --global
    dotnet ef database update  --project '$(Build.SourcesDirectory)/DealmateApi/DealmateApi.csproj' --connection "Host=$(DB_HOST);Database=$(DB_NAME);Username=$(DB_USER);Password=$(DB_PASSWORD);SslMode=$(DB_SSLMODE);"
  displayName: 'Apply EF Core Migrations'
  env:
    PATH: $(PATH):$(Agent.ToolsDirectory)/dotnet/tools
    
- task: NodeTool@0
  inputs:
    versionSpec: '16.x' # Specify the Node.js version
  displayName: 'Install Node.js'
  
- script: |
    npm install --force
    npm install jest-junit --save-dev
    npm run build
  workingDirectory: 'ui'
  displayName: 'Install and Build UI'

- script: |
    npm test -- --coverage --outputFile=ui/test-results/junit.xml --reporters=jest-junit
  workingDirectory: 'ui'
  displayName: 'Run Jest tests'

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: 'ui/test-results/junit.xml'
    failTaskOnFailedTests: true
  displayName: 'Publish Jest Test Results'

- script: |
    ls -R ui
  displayName: 'List UI Directory'


- task: CopyFiles@2
  displayName: 'Move UI Build to Drop Folder'
  inputs:
    SourceFolder: 'ui/build'
    Contents: '**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/ui'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifacts'
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'drop'
    publishLocation: 'Container'
    
- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: '*/DealmateUnitTest.csproj'

